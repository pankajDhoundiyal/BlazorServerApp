@page "/usertask"
@using Services
@using BlazorServeCrud.Models;
@using Blazored.SessionStorage
@using BlazorServeCrud.Enum
@inject ITaskService taskService;
@inject ISessionStorageService sessionStorage
<h3>UserAssignment</h3>
@attribute [Authorize]
<style>
    .tag {
        width: auto;
        display: block;
        background: #ddd;
        padding: 3px;
        border-radius: 3px;
        border: 1px solid;
        text-align: center;
        max-width: 150px;
        &.red-tag
        {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        &.green-tag {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }

        

        .disabled-link {
            cursor: not-allowed
        }
    }
</style>
@if (tasks is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true" Data="@tasks" TItem="DTask" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="DTask" Property="Tasks" Title="Task" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="DTask" Property="Description" Title="Description" Width="200px" />
            <RadzenDataGridColumn TItem="DTask" Property="DueDate" Title="DueDate" Width="120px">
                <Template Context="context">
                    @String.Format("{0:dd/MM/yyyy}", context.DueDate)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DTask" Title="Status" Width="120px">
                <Template Context="context">
                    @if (context.TaskStatus == DTaskStatus.Active)
                    {
                        <span>Active</span>
                    }
                    else if(context.TaskStatus == DTaskStatus.InProgress)
                    {
                        <span>InProgress</span>
                    }
                    else if (context.TaskStatus == DTaskStatus.Pending)
                    {
                        <span>Pending</span>
                    }
                    else if (context.TaskStatus == DTaskStatus.Completed)
                    {
                        <span>Completed</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DTask" Title="DueDate Status" Width="120px">
                <Template Context="context">
                    @if (context.DueDate < DateTime.Today)
                    {
                        <span class="tag red-tag">Expired</span>
                    }
                    else
                    {
                        <span class="tag green-tag">Active</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DTask" Title="Action" Width="100px">
                <Template Context="context">
                    @if (context.DueDate < DateTime.Today)
                    {
                        // do nothing
                        <a href="javascript:void(0)" style="cursor: not-allowed;">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </a>
                    }
                    else
                    {
                        <a href="edit/assignment/@context.Id">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </a>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
@code {
    private string userName;
    private List<DTask> tasks = new();
    protected override async Task OnInitializedAsync()
    {
        
        //base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userName = await sessionStorage.GetItemAsync<string>("UserName");
            tasks = await taskService.GetUsersTaskAsync(userName);

            StateHasChanged();
        }
    }
}
